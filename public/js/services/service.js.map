{"version":3,"sources":["services/service.ts"],"names":[],"mappings":";AAAA,2BAAyB,cAAc,CAAC,CAAA;AAExC;IAAA;QAEY,cAAS,GAAO,EAAE,CAAC;IAqC/B,CAAC;IAnCG,oBAAE,GAAF,UAAG,IAAW;QACV,IAAI,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,sBAAI,GAAJ,UAAM,IAAI,EAAE,IAAI;QACZ,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;YAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;gBAChF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxC,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAEO,uBAAK,GAAb,UAAe,OAAc,EAAE,KAAY;QACvC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QACzD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC/C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAClD,OAAO,IAAI,GAAG,CAAC;QAEf,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAEL,cAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,eAAO,UAuCnB,CAAA","file":"services/service.js","sourcesContent":["import {Observable} from './observable';\r\n\r\nexport class Service {\r\n\r\n    private listeners:any = {};\r\n\r\n    on(name:string):Observable {\r\n        var observable = new Observable();\r\n        if (typeof this.listeners[name] !== \"undefined\") {\r\n            this.listeners[name].push(observable);\r\n        } else {\r\n            this.listeners[name] = [ observable ];\r\n        }\r\n        return observable;\r\n    }\r\n\r\n    emit (name, data):void {\r\n        if (typeof this.listeners[name] !== \"undefined\") {\r\n            for (var i = 0, length = this.listeners[name].length; i < length; i++) {\r\n                this.listeners[name][i].update(data);\r\n            }\r\n        }\r\n\r\n        for (var key in this.listeners) {\r\n            if (this.match(<string>(key), name) && typeof this.listeners[key] !== \"undefined\") {\r\n                for (var j = 0, length = this.listeners[key].length; j < length; j++) {\r\n                    this.listeners[key][j].update(data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private match (pattern:string, value:string):boolean {\r\n        pattern = pattern.replace('*', '([0-9a-zA-Z\\.\\,\\\\\\/]+)');\r\n        pattern = pattern.replace('[0-9]', '([0-9]+)');\r\n        pattern = pattern.replace('[a-z]', '([a-zA-Z]+)');\r\n        pattern += '$';\r\n\r\n        return (new RegExp(pattern)).test(value);\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}